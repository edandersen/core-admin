@using DotNetEd.CoreAdmin
@using Microsoft.Extensions.Localization
@using NonFactors.Mvc.Grid
@using System.Linq.Expressions
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations;
@using System.Reflection
@inject IEnumerable<DotNetEd.CoreAdmin.CoreAdminOptions> CoreAdminOptions
@model DotNetEd.CoreAdmin.ViewModels.DataListViewModel
@inject IStringLocalizer<JsonLocalizer> _localizer

@{
    ViewData["Page_Title"] = Model.DbSetProperty.Name;
    Layout = "_CoreAdminLayout";

    var options = CoreAdminOptions.FirstOrDefault();
}

<h1 class="display-4">@Model.TableName</h1>

<div class="row">
    <div class="col-lg-12 my-3">
        @Html.ActionLink(_localizer["CreateNew"], "Create", new { id = Model.TableName }, new { @class = "btn btn-primary"})
    </div>
</div>

@(Html
    .Grid(Model.Data)
    .Build((columns) => {

        foreach(var entityProperty in Model.EntityType.GetProperties())
        {
            ParameterExpression entity = Expression.Parameter(typeof(object), "ent");
            var changedType = Expression.Convert(entity, Model.EntityType);
            var property = Expression.Property(changedType, entityProperty.Name);
            var propertyDisplayName = entityProperty.Name;
            if(Attribute.IsDefined(entityProperty, typeof(DisplayAttribute)))
            {
                var displayAttribute = entityProperty.GetCustomAttributes(typeof(DisplayAttribute),true).FirstOrDefault() as DisplayAttribute;
                if(displayAttribute != null)
                {
                    var displayAutoGeneratedField = displayAttribute.GetAutoGenerateField();
                    if(!( displayAutoGeneratedField.HasValue? displayAutoGeneratedField.Value : false ))
                        continue;
                        if(!string.IsNullOrEmpty(displayAttribute.Description))
                    propertyDisplayName = displayAttribute.Description;
                }
            }
            else if (entityProperty.PropertyType == typeof(Boolean))
            {
                var lambda = Expression.Lambda<Func<object, Boolean>>(property, entity);
                columns.Add(lambda).RenderedAs(m=> Html.CheckBox(entityProperty.Name, lambda.Compile().Invoke(m), new { @disabled = true })).Titled(propertyDisplayName);
            }
            else if (entityProperty.PropertyType == typeof(byte[]))
            {
                var lambda = Expression.Lambda<Func<object, byte[]>>(property, entity);

                columns.Add(lambda).Titled(entityProperty.Name)
                    .RenderedAs((value) => {
                        var base64 = ImageUtils.WebBase64EncodeImageByteArrayOrNull(lambda.Compile().Invoke(value));
                        return string.Empty;
                    } ).Encoded(false);
            }
            else
            {
               var funcType = typeof(Func<,>).MakeGenericType(typeof(object),entityProperty.PropertyType);
               var lambdaMethod = typeof(Expression).GetMethods(BindingFlags.Public|BindingFlags.Static).Where(m=>m.Name == "Lambda" && m.IsGenericMethod).First().MakeGenericMethod(funcType);
               var lambda = lambdaMethod.Invoke(null,new object[]{property,new ParameterExpression[]{entity}});
               var addMethod = columns.GetType().GetMethods(BindingFlags.Public|BindingFlags.Instance).Where(m=>m.Name=="Add" && m.IsGenericMethod).First();
               var column = addMethod.MakeGenericMethod(entityProperty.PropertyType).Invoke(columns,new object[]{lambda});
               var titledMethod = typeof(GridColumnExtensions).GetMethods(BindingFlags.Static|BindingFlags.Public).Where(m=>m.Name=="Titled").First().MakeGenericMethod(typeof(object),entityProperty.PropertyType);
               titledMethod.Invoke(null, new[]{column, propertyDisplayName});
            }
        }

        // only supports single PKs, not composite ones
        var pkProperties = Model.DbContext.Model.FindEntityTypes(Model.EntityType).First().FindPrimaryKey().Properties;
        if (pkProperties.Count == 1)
        {
           var pKProperty = pkProperties.Single()?.PropertyInfo;

            if (pKProperty != null)
            {
                columns.Add(item => Html.ActionLink(_localizer["Delete"], "DeleteEntity", new { dbSetName = Model.TableName, Id = pKProperty.GetValue(item)}));
                columns.Add(item => Html.ActionLink(@_localizer["Edit"], "EditEntity", new { dbSetName = Model.TableName, Id = pKProperty.GetValue(item)}));
            }
        }

        if (pkProperties.Count == 2)
        {
            var firstPkProperty = pkProperties[0]?.PropertyInfo;
            var secondPkProperty = pkProperties[1]?.PropertyInfo;

            if (firstPkProperty != null && secondPkProperty != null)
            {
                columns.Add(item => Html.ActionLink(_localizer["Delete"], "DeleteEntity", new { dbSetName = Model.TableName, Id = firstPkProperty.GetValue(item), SecondId = secondPkProperty.GetValue(item)}));
                columns.Add(item => Html.ActionLink(_localizer["Edit"], "EditEntity", new { dbSetName = Model.TableName, Id = firstPkProperty.GetValue(item), SecondId = secondPkProperty.GetValue(item)}));
            }
        }
    }

        )
    .Using(options.FilterMode)
    .Empty("No data found")
    .Filterable()
    .Sortable()
    .Pageable(pager =>
    {
        pager.PageSizes = options.PageSizes;
        pager.ShowPageSizes = options.ShowPageSizes;
    })
)

@section Scripts
{
     <script>
        document.querySelectorAll(".mvc-grid").forEach(element => new MvcGrid(element));
     </script>
}


